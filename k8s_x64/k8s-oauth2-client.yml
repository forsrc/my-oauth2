apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: oauth2-client
  name: oauth2-client
  namespace: oauth2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: oauth2-client
  strategy: {}
  template:
    metadata:
      labels:
        app: oauth2-client
      # annotations:
      #   co.elastic.logs/enabled: "true"
      #   co.elastic.logs.json-logging/json.keys_under_root: "true"
      #   co.elastic.logs.json-logging/json.add_error_key: "true"
      #   co.elastic.logs.json-logging/json.message_key: "message"
    spec:
      containers:
      - image: forsrc/my-oauth2:oauth2-client
        name: oauth2-client
        ports:
        - containerPort: 8080
        imagePullPolicy: IfNotPresent #Always
        resources:
        env:
          - name: MY_EUREKA_SERVER
            value: http://forsrc:forsrc@oauth2-eureka-server:8080/eureka
            # value: http://forsrc:forsrc@oauth2-eureka-server-0.oauth2-eureka-server.oauth2.svc.cluster.local:8080/eureka, http://forsrc:forsrc@oauth2-eureka-server-1.oauth2-eureka-server.oauth2.svc.cluster.local:8080/eureka
        livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
      initContainers:
      - name: init-waiting
        image: busybox:1.28
        command: ['sh', '-c', 'until nc -z oauth2-eureka-server 8080; do echo waiting for oauth2-eureka-server 8080; sleep 2; done;']

---

apiVersion: v1
kind: Service
metadata:
  name: oauth2-client
  namespace: oauth2
spec:
  selector:
    app: oauth2-client
  ports:
  - port: 8080
    targetPort: 8080
    name: oauth2-client
  type: ClusterIP